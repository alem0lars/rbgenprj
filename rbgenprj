#!/usr/bin/env ruby


require 'fileutils'
require 'thor'


class RBGenPrj < Thor

  include Thor::Actions

  def self.source_root
    File.expand_path(File.dirname(__FILE__))
  end

  # destination info
  #option :dst_path, :type => :string, :default => File.dirname(__FILE__),
  #       :desc => 'the parent directory for the generated project'
  # project info
  option :prj_name, :type => :string, :required => true,
         :desc => 'the project name'
  option :prj_module, :type => :string, :required => true,
         :desc => 'the root module'
  option :prj_summary, :type => :string, :default => 'TODO: project summary',
         :desc => 'the summary description'
  option :prj_desc, :type => :string, :default => 'TODO: project description',
         :desc => 'the verbose description'
  # author info
  option :author_name, :type => :string,
         :default => ((_username = `git config user.name`.chomp).empty? ?
             raise(Thor::Error.new('cannot guess author name')) : _username),
         :desc => 'the author of the project'
  option :author_email, :type => :string,
         :default => ((_email = `git config user.email`.chomp).empty? ?
             raise(Thor::Error.new('cannot guess author email')) : _email),
         :desc => 'the email of the author'
  # ruby info
  option :rb_vers, :type => :string, :default => RUBY_VERSION,
         :desc => 'the ruby version that should be used'
  # additional features
  option :with_core_exts, :type => :boolean
  option :with_cfg,       :type => :boolean
  option :with_cli,       :type => :boolean
  desc 'generate <dst_path>',
       'generate a new ruby project into <dst_path> from a starting skeleton'
  def generate(dst_path)
    unless File.directory?(dst_path)
      raise Thor::RequiredArgumentMissingError.new(
          'the provided destination path is not a valid directory')
    end

    say "generating a new ruby project called: #{options[:prj_name]}\n", :cyan

    directory 'skeleton', File.join(dst_path, options[:prj_name]),
              :exclude_pattern => excluded_skeleton_files(options)
    Dir.glob(File.join(dst_path, options[:prj_name], 'bin', '*')) do |bin_path|
      chmod(bin_path, 0755)
    end

    say "\ndone\n", :green
  end

  def prj_name
    options.prj_name
  end

  private

  # utils {{{

  def excluded_skeleton_files(options)
    exclude_pattern = nil

    features_info(options).each do |option_name, paths|
      unless options[option_name]
        paths.each do |path|
          exclude_pattern = exclude_pattern ?
              /#{exclude_pattern}|#{path}/ :
              /#{path}/
        end
      end
    end

    exclude_pattern
  end

  def features_info(options)
    {:with_cli => ['cli.rb']}
  end

  # }}}

end


RBGenPrj.start(ARGV)
